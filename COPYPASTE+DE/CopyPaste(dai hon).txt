```markdown
# TỔNG HỢP CÁC CODE SOURCE MÔN PRF192

## MỤC LỤC
I. KIẾN THỨC CHUNG
1. Kiểu dữ liệu và khai báo:
2. Toán tử:
3. Toán so sánh & Logic
II. CÁC SOURCE CÓ TRONG PE PRF192
- Source 1: Đổi vị trí số lẻ lớn nhất và nhỏ nhất
- Source 2: Hàm kiểm tra năm nhuận
- Source 3: Hàm kiểm tra số Amstrong
- Source 4: Vẽ hình vuông
- Source 5: Vẽ hình vuông bị rỗng dưới
- Source 6: Vẽ hình vuông rỗng trên
- Source 7: Vẽ hình vuông rỗng giữa
- Source 8: Vẽ hình tam giác
- Source 8.1: Vẽ Tam giác ngược 1
- Source 9: Vẽ Tam giác ngược 2
- Source 10: Vẽ Tam giác ngược 3
- Source 11: Vẽ tam giác cân 1
- Source 12: Vẽ tam giác cân 2
- Source 13.1: Tam giác có số (1)
- Source 13.2: Vẽ tam giác có số (2)
- Source 13.3: Vẽ tam giác chữ đối xứng
- Source 14: Vẽ hình bình hành
- Source 15: Vẽ ngôi nhà
- Source 16: Vẽ hình thoi
- Source 17: Vẽ tam giác rỗng
- Source 18: Tính tổng các thàh phần trong mảng
- Source 19: Đến số nguyên âm trong mảng
- Source 20: Tìm số nhỏ nhất, số lớn nhất
- Source 21: Tìm số nhỏ, lớn thứ 2 trong mảng
- Source 22: Đảo ngược số
- Source 23: Sắp xếp phần tử theo thứ tự tăng dần
- Source 24: Sắp xếp phần tử theo thứ tự giảm dần
- Source 25: giam bot so luong trung nhau cua mang
- Source 26: Vong lap tra ra so lan xuat hien nhieu nhat cua mot phan tu trong arr
- Source 27: Tính toán giờ, phút, giây
- Source 28: Bình phương các số lẻ trong mảng
- Source 29: Hàm kiểm tra các số nguyên tố (Prime Number)
- Source 30: Hàm tính tổng n số.
- Source 31: Hàm kiểm tra số chính phương
- Source 32: Kiểm tra số có phải thuộc dãy Fibonacci
- Source 33: Các công thức tính diện tích (S), chu vi (P) hình chữ nhật, tam giác, tròn
- Source 34: Sắp xếp theo kiểu Insertion
- Source 35: Sắp xếp theo kiểu Bubble
- Source 36: Sắp xếp giảm dần (Float)
- Source 37: Sắp xếp theo kieu selection
- Source 38: Xoa cac phan tu la so le trung nhau
- Source 39: ham tinh do dai cua chuoi
- Source 40: In ra so chu so trong string
- Source 41: In ra so chan lon nhat trong n so
- Source 42: Bội chung nhỏ nhất (LCM), Ước chung lớn nhất (GCD)
- Source 43: In ra so chan tai vi tri chan va sort
- Source 44: Neu la so le, binh phuong roi cong vao
- Source 45: In ra tich cua cac so trong chu so n
- Source 46: Kiem tra 1 so co phai power of 2
- Source 47: In ra ky tu viet hoa at position even
- Source 48: In ra cac ky tu la chu
- Source 49: Perfect number
- Source 50: Dem digit trong string
- Source 51: Viet hoa 1/2 length string
- Source 52: Check valid name . OUTPUT:1 neu valid
- Source 53: Average positive number
- Source 54: Diện tích hình tròn
- Source 55: check square number
- Source 56: xoa 1 phan tu tai vi tri ma nguoi dung nhap vao
- Source 57: Chen 1 so bat ky vao array
- Source 58: swap 2 vi tri trong array
- Source 59: xoa 1 phan tu trong array vi tri nguoi dung nhap
- Source 60: In ra gio phut giay
- Source 61: Tong so dau va so cuoi
- Source 62: Kiem tra exponent
- Source 63: Kiem tra n%5==0 in ra so lan xuan hien cua n
- Source 64: binary->octal
- Source 65: check mang tang dan
- Source 66: check mang doi xung
- Source 67: In ra số Nguyên tố đầu tiên
- Source 68: tính:  (-1)n+1*xn
- Source 69: reverse day so
- Source 70: square odd number
- Source 71: in ra vi tri co tong bang` mot so nao` do
- Source 72: Diện tích và chu vi hình chữ nhật
- Source 73: Diện tích và chu vi tam giác:
- Source 74: Diện tích và chu vi hình tròn:
- Source 75: Tính giai thừa F1(n) = n!
- Source 76: Tinh tong phan so F2(n) = 1 + 2 + 3 + ... + n
- Source 77: Nhap so nguyen n
- Source 78: In ra cac so chan o vi tri le theo thu tu giam dan coi v? tri tri dau la vi tri 1
- Source 79: Nhập chuỗi và in ra từ dài nhất và ngắn nhất

## I. KIẾN THỨC CHUNG
### 1. Kiểu dữ liệu và khai báo:
| STT | Kiểu dữ liệu | Khai báo | Kích thước |
|-----|---------------|----------|-------------|
| 1   | int           | %d, %i   | 2 hoặc 4 bytes |
| 2   | char          | %c       | 1 bytes     |
| 3   | float         | %f, %.(n)f | 4 bytes   |
| 4   | double        | %lf      | 8 bytes     |
| 5   | short int     | %hd      | 2 bytes     |
| 6   | unsigned int  | %u       | 2 hoặc 4 bytes |
| 7   | long int      | %ld, %li | 4 bytes     |
| 8   | long long int | %lld, %lli | 8 bytes   |
| 9   | unsigned long int | %lu | 4 bytes     |
| 10  | unsigned long long int | %llu | 8 bytes |
| 11  | signed char   | %c       | 1 bytes     |
| 12  | unsigned char | %c       | 1 bytes     |
| 13  | long double   | %lf      | 10 bytes    |

### 2. Toán tử:
| Phép toán | Ý nghĩa | Ví dụ |
|-----------|---------|-------|
| +         | Cộng    | a+b   |
| -         | Trừ     | a-b   |
| *         | Nhân    | a*b   |
| /         | chia    | a/b   |
| %         | Chia lấy phần dư | a%b |

### 3. Toán so sánh & Logic
| Phép toán | Ý nghĩa |
|-----------|---------|
| >         | Lớn hơn |
| <         | Nhỏ hơn |
| >=        | Lớn hoặc bằng |
| <=        | Nhỏ hoặc bằng |
| ==        | Bằng    |
| !=        | khác    |

## II. CÁC SOURCE CÓ TRONG PE PRF192
### Source 1: Đổi vị trí số lẻ lớn nhất và nhỏ nhất
```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int main() {
    system("cls");
    //INPUT - @STUDENT:ADD YOUR CODE FOR INPUT HERE:
    int n;
    scanf("%d", &n);
    int* arr = (int*)malloc(n * sizeof(int));  // Dynamically allocate memory
    int i;
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    int min_odd = -1, max_odd = -1;
    for (i = 0; i < n; i++) {
        if (arr[i] % 2 != 0) {
            if (min_odd == -1 || arr[i] < arr[min_odd]) {
                min_odd = i;
            }
            if (max_odd == -1 || arr[i] > arr[max_odd]) {
                max_odd = i;
            }
        }
    }
    if (min_odd != -1 && max_odd != -1) {
        swap(&arr[min_odd], &arr[max_odd]);
    } 
    // Fixed Do not edit anything here.
    printf("\nOUTPUT:\n");
    //@STUDENT: WRITE YOUR OUTPUT HERE:
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    free(arr); 
    //--FIXED PART - DO NOT EDIT ANY THINGS HERE
    printf("\n");
    system ("pause");
    return(0);
}
```

### Source 2: Hàm kiểm tra năm nhuận
```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>

int isLeapYear(int year) {
    if (year % 4 == 0) {
        if (year % 100 == 0) {
            if (year % 400 == 0)
                return 1;
            else
                return 0;
        }
        else
            return 1;
    }
    else
        return 0;
}

int main() {
    system("cls");
    //INPUT - @STUDENT:ADD YOUR CODE FOR INPUT HERE:
    int year;
    scanf("%d", &year);
    // Fixed Do not edit anything here.
    printf("\nOUTPUT:\n");
    //@STUDENT: WRITE YOUR OUTPUT HERE:
    if (isLeapYear(year))
        printf("%d is a leap year.", year);
    else
        printf("%d is not a leap year.", year);
    //--FIXED PART - DO NOT EDIT ANY THINGS HERE
    printf("\n");
    system ("pause");
    return(0);
}
```

### Source 3: Hàm kiểm tra số Amstrong
```c
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdbool.h>

int countDigits(int n) {
    int count = 0;
    while (n > 0){
        n /= 10;
        count++;
    }
    return count;
}

bool isArmstrong(int n) {
    int numDigits = countDigits(n);
    int tmp = n;
    int sum = 0;
    int last;
    while (tmp > 0) {
        last = tmp % 10;
        tmp /= 10;
        sum += pow(last, numDigits);
    }
    return sum == n;
}

int main() {
    system("cls");
    int n;
    scanf("%d", &n);
    printf("\nOUTPUT:\n");
    if (isArmstrong(n)) {
        printf("%d is an Armstrong number.", n);
    } else {
        printf("%d is not an Armstrong number.", n);
    }
    printf("\n");
    system("pause");
    return 0;
}
```

### Source 4: Vẽ hình vuông
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

void veHinhVuong1(int n) {
    int i, j;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            printf("* ");
        }
        printf("\n");
    }
}

int main() {
    int n;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    veHinhVuong1(n);

    return 0;
}
```

### Source 5: Vẽ hình vuông bị rỗng dưới
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

void veHinhVuong(int n){
    int i, j;
    for (i = 0; i < n; i++) {
        if (i == 0) {
            for (j = 0; j < n; j++) {
                printf("* ");
            }
        } else {
            printf("*");
            for (j = 0; j < n - 2; j++) {
                printf("  ");
            }
            printf(" *");
        }
        printf("\n");
    }
}

int main() {
    int n;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    veHinhVuong(n);
    return 0;
}
```

### Source 6: Vẽ hình vuông rỗng trên 
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

void veHinhVuong(int n){
    int i, j;
    for (i = 0; i < n; i++) {
        if (i == n-1) {
            for (j = 0; j < n; j++) {
                printf("* ");
            }
        } else {
            printf("*");
            for (j = 0; j < n - 2; j++) {
                printf("  ");
            }
            printf(" *");
        }
        printf("\n");
    }
}

int main() {
    int n;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    veHinhVuong(n);
    return 0;
}
```

### Source 7: Vẽ hình vuông rỗng giữa
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

void veHinhVuong (int n){
    int i,j;
    for (i= 0;i<n;i++) {
        if (i==n-1 || i==0 ) {
            for ( j=0;j<n;j++){
                printf ("* ");
            }
        } else {
            printf ("*");
            for (j=0;j<2*n-3;j++){
                printf (" ");
            }
            printf ("*");
        }
        printf ("\n");
    }
}

int main() {
    int n;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    veHinhVuong(n);
    return 0;
}
```

### Source 8: Vẽ hình tam giác 
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

void veTamGiac (int n){
    int i,j;
    for (i=0;i<=n;i++) {
        for (j=0;j<i;j++){
            printf ("* ");
        }
        printf ("\n");
    }
}

int main() {
    int n;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    veTamGiac(n);
    return 0;
}
```

### Source 8.1: Vẽ Tam giác ngược 1
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

void veTamGiac (int n){
    int i,j;
    for (i=0;i<=n;i++) {
        for (j=0;j<n-i;j++){
            printf ("* ");
        }
        printf ("\n");
    }
}

int main() {
    int n;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    veTamGiac(n);
    return 0;
}
```

### Source 9: Vẽ Tam giác ngược 2
```c
#include <stdio.h>

void veTamGiac(int n) {
    int i, j, size = n;
    for (i = 0; i < size; i++) {
        for (j = 0; j < i; j++) {
            printf(" ");
        }
        for (j = i; j < size; j++) {
            printf("*");
        }
        printf("\n");
    }
}

int main() {
    int n;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    veTamGiac(n);
    return 0;
}
```

### Source 10: Vẽ Tam giác ngược 3 
```c
#include <stdio.h>

void veTamGiac (int n){
    int i,j;
    for (i=0;i<n;i++){
        for (j=0;j<n-i-1;j++){
            printf (" ");
        }
        for (j=0;j<i+1;j++){
            printf ("*");
        }
        printf ("\n");
    }
}

int main() {
    int n;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    veTamGiac(n);
    return 0;
}
```

### Source 11: Vẽ tam giác cân 1
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main() {
    int i, space, rows, k = 0;
    scanf("%d", &rows);

    for (i = 1; i <= rows; ++i, k = 0) {
        for (space = 1; space <= rows - i; ++space) {
            printf("  ");
        }
        while (k != 2 * i - 1) {
            printf("* ");
            ++k;
        }
        printf("\n");
    }
    
    return 0;
}
```

### Source 12: Vẽ tam giác cân 2 
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main() {
    int rows, i, j, space;
    scanf("%d", &rows);

    for (i = rows; i >= 1; --i) {
        for (space = 0; space < rows - i; ++space)
            printf("  ");
        for (j = i; j <= 2 * i - 1; ++j)
            printf("* ");
        for (j = 0; j < i - 1; ++j)
            printf("* ");
        printf("\n");
    }

    return 0;
}
```

### Source 13.1: Tam giác có số (1)
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main() {
    int rows, i, j, number = 1;
    scanf("%d", &rows);
    printf("OUTPUT:\n");
    for (i = 1; i <= rows; i++) {
        for (j = 1; j <= i; ++j) {
            printf("%d ", number);
            ++number;
        }
        printf("\n");
    }

    return 0;
}
```

### Source 13.2: Vẽ tam giác có số (2)
```c
#include <stdio.h>

int main(){
    int i, j, row;
    scanf("%d", &row);
    printf("OUTPUT:\n");
    for(i = 1; i <= row; i++){
        for(j = 1; j <= i; j++){
            printf("%d ", j);
        }
        printf("\n");
    }
    
    return 0;
}
```

### Source 13.3: Vẽ tam giác chữ đối xứng
```c
#include <stdio.h>

int main() {
    int i, j, rows, count=0;
    scanf("%d", &rows);
    printf("OUTPUT:\n");
    for (i = 0; i < 2*rows; i=i+2) {
        for (j = 0; j <= i; j++) {
            printf("%c", 'A'+count);
            if(j < i/2)
                count++;
            else
                count--;
        }
        count = 0;
        printf("\n");
    }
    return(0);
}
```

### Source 14: Vẽ hình bình hành 
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main() {
    int i, j, n;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j < n - i + 1; j++) {
            printf(" ");
        }
        for (j = 1; j <= n; j++) {
            if (i == 1 || j == 1 || i == n || j == n) {
                printf("*");
            } else {
                printf(" ");
            }
        }
        printf("\n");
    }

    return 0;
}
```

### Source 15: Vẽ ngôi nhà
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main() {
    int i, j, space, rows = 8, star = 0;
    for (i = 0; i < rows; i++)
    {
        if (i < 5)
        {
            for (space = 1; space < 5 - i; space++)
            {
                printf(" ");
            }
            while (star != (2 * i + 1))
            {
                printf("*");
                star++;
            }
            star = 0;
            /* move to next row */
            printf("\n");
        }
        else
        {
            for (j = 0; j < 9; j++)
            {
                if ((int)(j / 3) == 1)
                    printf(" ");
                else
                    printf("*");
            }
            printf("\n");
        }
    }
    return 0;
}
```

### Source 16: Vẽ hình thoi 
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main() {
    int n;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    int i;
    for (i = 1; i <= n; i++)
    {
        int j;
        for (j = 1; j <= n - i; j++)
        {
            printf("   ");
        }
        for (j = 1; j <= 2 * i - 1; j++)
        {
            printf(" * ");
        }
        printf("\n");
    }
    for (i = n - 1; i >= 1; i--)
    {
        int j;
        for (j = 1; j <= n - i; j++)
        {
            printf("   ");
        }
        for (j = 1; j <= 2 * i - 1; j++)
        {
            printf(" * ");
        }
        printf("\n");
    }
    return 0;
}
```

### Source 17: Vẽ tam giác rỗng 
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main() {
    int i, j, n;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= i; j++) {
            if (j == 1 || i == n || i == j)
                printf("*");
            else
                printf(" ");
        }
        printf("\n");
    }
    
    return 0;
}
```

### Source 18: Tính tổng các thàh phần trong mảng 
```c
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdbool.h>

int main() {
    system("cls");
    int n;
    scanf("%d", &n);
    int a[n];
    int i;
    for(i=0; i<n; i++) {
        scanf("%d", &a[i]);
    }
    int sum=0;
    for(i=0; i<n; i++) {
        sum+=a[i];
    }
    printf("\nOUTPUT:\n");
    printf("%d", sum);
    printf("\n");
    system("pause");
    return 0;
}
```

### Source 19: Đến số nguyên âm trong mảng  
```c
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdbool.h>

int main() {
    system("cls");
    int n;
    scanf("%d", &n);
    int a[n];
    int i;
    for (i=0;i<n;i++){
        scanf ("%d",&a[i]);
    }
    int count=0; 
    for (i=0;i<n;i++) {
        if (a[i]<0) {
            count++;
        }
    }    
    printf("\nOUTPUT:\n");
    printf("%d", count);
    printf("\n");
    system("pause");
    return 0;
}
```

### Source 20: Tìm số nhỏ nhất, số lớn nhất 
```c
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdbool.h>

int main() {
    system("cls");
    int n;
    scanf("%d",&n);
    int i,Arr[n];
    for(i=0;i<n;i++)
        scanf("%d",&Arr[i]);
    int min = Arr[0];
    int max = Arr[0];
    for (i=0;i<n;i++) {
        if (Arr[i] < min) {
            min = Arr[i];
        }
    }
    for (i=0;i<n;i++) {
        if (Arr[i] > max) {
            max = Arr[i];
        }
    }
    printf("\nOUTPUT:\n");
    printf ("%d %d",min, max);
    printf("\n");
    system("pause");
    return 0;
}
```

### Source 21: Tìm số nhỏ, lớn thứ 2 trong mảng
```c
#include <stdio.h>
#include <stdlib.h>

void findSecondLargestAndSmallest(int arr[], int size) {
    int max = arr[0];
    int secondMax = arr[0];
    int min = arr[0];
    int secondMin = arr[0];
    int i;

    for (i = 0; i < size; i++) {
        if (arr[i] > max) {
            secondMax = max;
            max = arr[i];
        } else if (arr[i] > secondMax && arr[i] != max) {
            secondMax = arr[i];
        }

        if (arr[i] < min) {
            secondMin = min;
            min = arr[i];
        } else if (arr[i] < secondMin && arr[i] != min) {
            secondMin = arr[i];
        }
    }
    printf("%d\n", secondMax);
    printf("%d\n", secondMin);
}

int main() {
    int n;
    scanf("%d", &n);
    int* arr = (int*)malloc(n * sizeof(int));
    int i;
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    printf("OUTPUT:\n");
    findSecondLargestAndSmallest(arr, n);
    free(arr);
    return 0;
}
```

### Source 22: Đảo ngược số 
```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    int i,j;
    long n;
    do
        scanf("%d",&n); 
    while (n<0);
    long rev=0;
    while (n!=0){
        rev=rev*10+n%10;
        n/=10;
    }
    n=rev;
    printf("OUTPUT:\n");
    printf("%d",n);
    return 0;
}    
```

### Source 23: Sắp xếp phần tử theo thứ tự tăng dần 
```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    int n;
    scanf("%d", &n);
    int a[n];
    int i;
    for(i=0; i<n; i++) scanf("%d", &a[i]);
    for (i = 0; i < n - 1; i++) {
        int j;
        for (j = 0; j < n - 1 - i; j++) {
            if (a[j] > a[j+1]) {
                int temp = a[j];
                a[j] = a[j+1];
                a[j+1] = temp;
            }
        }
    }    
    printf("OUTPUT:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }  
    return 0;
}
```

### Source 24: Sắp xếp phần tử theo thứ tự giảm dần 
```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    int n;
    scanf("%d", &n);
    int a[n];
    int i;
    for(i=0; i<n; i++) scanf("%d", &a[i]);
    for (i = 0; i < n - 1; i++) {
        int j;
        for (j = 0; j < n - 1 - i; j++) {
            if (a[j] < a[j+1]) {
                int temp = a[j];
                a[j] = a[j+1];
                a[j+1] = temp;
            }
        }
    }    
    printf("OUTPUT:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }  
    return 0;
}
```

### Source 25: giam bot so luong trung nhau cua mang 
```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>

int main() {
    system("cls");
    //INPUT - @STUDENT:ADD YOUR CODE FOR INPUT HERE:
    int n;
    int arr[1000], b[1000] = {0}, c[1000] = {0}; //Khoi tao 3 mang so nguyen
    int i;
    scanf("%d", &n); //Nhap so phan tu cua mang arr
    for(i = 0; i < n;i++)
    {
        scanf("%d", &arr[i]);	// Nhap n phan tu mang so nguyen arr
    }
    for(i = 0; i < n;i++)
    {
        if(arr[i] > 0) //Mang so nguyen b[] ghi lai so lan xuat hien cua
            b[arr[i]]++;  //cac phan tu lon hon 0 trong day arr
        if(arr[i] < 0) //Mang so nguyen c[] ghi lai so lan xuat hien cua
            c[-arr[i]]++; //cac phan tu nho hon 0 trong day arr
    }
    int max = 0;
    for(i = 0; i <n ;i++)
    {
        if(arr[i] > 0)
        {
            if(b[arr[i]] > max)
                max = b[arr[i]];
        }
        else
        {
            if(c[-arr[i]] > max)
                max = c[-arr[i]];
        }
    }

    // Fixed Do not edit anything here.
    printf("\nOUTPUT:\n");
    //@STUDENT: WRITE YOUR OUTPUT HERE:
    for(i = 0; i <1000 ;i++)
    {
        if(b[i] == max)
        {
            printf("%d ", i);
        }
        if(c[i] == max)
            printf("%d ", -i);
    } //In ra phan tu co lan xuat hien nhieu nhat trong day

    //--FIXED PART - DO NOT EDIT ANY THINGS HERE
    printf("\n");
    system ("pause");
    return(0);
}
```

### Source 26: Vong lap tra ra so lan xuat hien nhieu nhat cua mot phan tu trong arr
```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>

int main() {
    system("cls");
    //INPUT - @STUDENT:ADD YOUR CODE FOR INPUT HERE:
    int n;
    int arr[1000], b[1000] = {0}, c[1000] = {0}; //Khoi tao 3 mang so nguyen
    int i;
    scanf("%d", &n); //Nhap so phan tu cua mang arr
    for(i = 0; i < n;i++)
    {
        scanf("%d", &arr[i]);	// Nhap n phan tu mang so nguyen arr
    }
    for(i = 0; i < n;i++)
    {
        if(arr[i] > 0) //Mang so nguyen b[] ghi lai so lan xuat hien cua
            b[arr[i]]++;  //cac phan tu lon hon 0 trong day arr
        if(arr[i] < 0) //Mang so nguyen c[] ghi lai so lan xuat hien cua
            c[-arr[i]]++; //cac phan tu nho hon 0 trong day arr
    }
    int max = 0;
    for(i = 0; i <n ;i++)
    {
        if(arr[i] > 0)
        {
            if(b[arr[i]] > max)
                max = b[arr[i]];
        }
        else
        {
            if(c[-arr[i]] > max)
                max = c[-arr[i]];
        }
    }

    // Fixed Do not edit anything here.
    printf("\nOUTPUT:\n");
    //@STUDENT: WRITE YOUR OUTPUT HERE:
    for(i = 0; i <1000 ;i++)
    {
        if(b[i] == max)
        {
            printf("%d ", i);
        }
        if(c[i] == max)
            printf("%d ", -i);
    } //In ra phan tu co lan xuat hien nhieu nhat trong day

    //--FIXED PART - DO NOT EDIT ANY THINGS HERE
    printf("\n");
    system ("pause");
    return(0);
}
```

### Source 27: Tính toán giờ, phút, giây 
```c
#include<stdio.h>
int main(){
    int a;
    scanf("%d",&a);
    printf("OUTPUT:\n");
    int h,m,s;
    h=a/3600;
    m=(a-(h*3600))/60;
    s=a-h*3600-m*60;
    printf("%d:%d:%d", h, m, s);
    return 0;
}
```

### Source 28: Bình phương các số lẻ trong mảng 
```c
#include <stdio.h>           
int main() {
    int size;
    scanf("%d",&size);
    int i,Arr[size];
    for(i=0;i<size;i++)
        scanf("%d",&Arr[i]);
    printf("OUTPUT:\n");
    for(i=0;i<size;i++)
        if(Arr[i]%2==1 && Arr[i]>0) {
            printf("%d ",Arr[i]*Arr[i]);
        } 
    return 0;
}
```

### Source 29: Hàm kiểm tra các số nguyên tố (Prime Number)  
```c
#include <stdio.h>
#include <math.h>

int Prime(int n) {
    int i;
    if (n < 2) return 0;
    for (i = 2; i <= sqrt(n); i++) {
        if (n % i == 0) return 0;
    }
    return 1;
}

int main() {
    int n;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    if (Prime(n)) {
        printf("%d is a prime number.\n", n);
    } else {
        printf("%d is not a prime number.\n", n);
    }
    return 0;
}
```

### Source 30: Hàm tính tổng n số.
```c
#include <stdio.h>
#include <math.h>

int SumInRange(int n) {
    int i;
    int sum = 0;
    for (i = 1; i <= n; i++) {
        sum += i;
    }
    return sum;
}

int main() {
    int n;
    int sum;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    sum = SumInRange(n);
    printf("%d", sum);
    return 0;
}
```

### Source 31: Hàm kiểm tra số chính phương
```c
#include <stdio.h>
#include <math.h>

int SCP(int n) {
    if (sqrt(n) == (int)sqrt(n))
        return 1;
    else
        return 0;
}

int main() {
    int n;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    if (SCP(n))
        printf("%d is a perfect square.\n", n);
    else
        printf("%d is not a perfect square.\n", n);
    return 0;
}
```

### Source 32: Kiểm tra số có phải thuộc dãy Fibonacci
```c
#include <stdio.h>
#include <math.h>

int isPerfectSquare(int n) {
    int sqrtN = sqrt(n);
    return (sqrtN * sqrtN == n);
}

int isFibonacci(int n) {
    return isPerfectSquare(5 * n * n + 4) || isPerfectSquare(5 * n * n - 4);
}

int main() {
    int n;
    scanf("%d", &n);
    printf("OUTPUT:\n");
    if (isFibonacci(n)) {
        printf("%d is a Fibonacci number.\n", n);
    } else {
        printf("%d is not a Fibonacci number.\n", n);
    }

    return 0;
}
```

### Source 33: Các công thức tính diện tích (S), chu vi (P) hình chữ nhật, tam giác, tròn
```c
#include <stdio.h>
#include <math.h>

double getPerimCircle(double r) {
    if (r > 0)
        return 2 * r * 3.14159; // S? d?ng giá tr? pi chính xác hon
    else
        return 0;
}

double getAreaCircle(double r) {
    if (r > 0)
        return r * r * 3.14159;
    else
        return 0;
}

double getPerimRectangle(double A, double B) {
    if (A > 0 && B > 0)
        return 2 * (A + B);
    else
        return 0;
}

double getAreaRectangle(double A, double B) {
    if (A > 0 && B > 0)
        return A * B;
    else
        return 0;
}

double getPerimTriangle(double A, double B, double C) {
    if (A > 0 && B > 0 && C > 0 && A + B > C && B + C > A && A + C > B)
        return A + B + C;
    else
        return 0;
}

double getAreaTriangle(double A, double B, double C) {
    if (A > 0 && B > 0 && C > 0 && A + B > C && B + C > A && A + C > B) {
        double P = getPerimTriangle(A, B, C) / 2;
        return sqrt(P * (P - A) * (P - B) * (P - C));
    } else {
        printf("\nÐây không ph?i là tam giác, vui lòng ki?m tra d? dài các c?nh A, B, C\n");
        return 0;
    }
}

int main() {
    double r = 5.0; // Bán kính c?a hình tròn
    double A = 3.0, B = 4.0, C = 5.0; // Các c?nh c?a tam giác

    printf("Chu vi c?a Hình Tròn: %lf\n", getPerimCircle(r));
    printf("Di?n tích c?a Hình Tròn: %lf\n", getAreaCircle(r));

    printf("Chu vi c?a Hình Ch? Nh?t: %lf\n", getPerimRectangle(A, B));
    printf("Di?n tích c?a Hình Ch? Nh?t: %lf\n", getAreaRectangle(A, B));

    printf("Chu vi c?a Tam Giác: %lf\n", getPerimTriangle(A, B, C));
    printf("Di?n tích c?a Tam Giác: %lf\n", getAreaTriangle(A, B, C));

    return 0;
}
```

### Source 34: Sắp xếp theo kiểu Insertion
```c
#include <stdio.h>

void Insertion(int A[], int n) {
    int i, j;
    for (i = 1; i < n; i++) {
        int value = A[i];
        j = i - 1;
        while (j >= 0 && value < A[j]) {
            A[j + 1] = A[j];
            j--;
        }
        A[j + 1] = value;
    }
}

int main() {
    int n;
    scanf("%d", &n);
    int A[n];
    int i;
    for (i = 0; i < n; i++) {
        scanf("%d", &A[i]);
    }
    Insertion(A, n);
    printf("OUTPUT:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", A[i]);
    }
    printf("\n");
    return 0;
}
```

### Source 35: Sắp xếp theo kiểu Bubble 
```c
#include <stdio.h>

void bubble(int A[], int n, int switchOper) {
    int i, j;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n - 1 - i; j++) {
            if ((A[j] - A[j + 1]) * switchOper > 0) {
                int temp = A[j];
                A[j] = A[j + 1];
                A[j + 1] = temp;
            }
        }
    }
}

int main() {
    int n;
    scanf("%d", &n);
    int A[n];
    int i;
    for (i = 0; i < n; i++) {
        scanf("%d", &A[i]);
    }

    bubble(A, n, 1);
    printf("OUTPUT:\n");
    printf("Sắp xếp tang dan: ");
    for (i = 0; i < n; i++) {
        printf("%d ", A[i]);
    }
    printf("\n");
    bubble(A, n, -1);
    printf("Sắp xếp giam dan: ");
    for (i = 0; i < n; i++) {
        printf("%d ", A[i]);
    }
    printf("\n");

    return 0;
}
```

### Source 36: Sắp xếp giảm dần (Float)
```c
#include <stdio.h>
#include <stdlib.h>

void bubble(float A[], int n, int switchOper) {
    int i, j;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n - 1 - i; j++) {
            if ((A[j] - A[j + 1]) * switchOper > 0) {
                float temp = A[j];
                A[j] = A[j + 1];
                A[j + 1] = temp;
            }
        }
    }
}

int main() {
    int n;
    scanf("%d", &n);
    float Arr[n];
    int i;
    for (i = 0; i < n; i++) {
        scanf("%f", &Arr[i]);
    }
    printf("OUTPUT:\n");
    bubble(Arr, n, -1);
    for (i = 0; i < n; i++) {
        printf("%.3f ", Arr[i]);
    }
    return 0;
}
```

### Source 79: Nhập chuỗi và in ra từ dài nhất và ngắn nhất
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main(){
   char str[100], word[100], largest[100], smallest[100];
   int i, j, len, largest_len = 0, smallest_len = 100;
   fgets(str, 100, stdin);
   j = 0;
   for(i=0; i<=strlen(str); i++){
      if(str[i]==' ' || str[i]=='\0'){
         word[j] = '\0';
         len = strlen(word);
         if(len > largest_len){
            largest_len = len;
            strcpy(largest, word);
         }
         if(len < smallest_len){
            smallest_len = len;
            strcpy(smallest, word);
         }
         j = 0;
      }
      else{
         word[j] = str[i];
         j++;
      }
   }
   printf("OUTPUT:\n");
   printf("%s\n", largest); //The largest word
   printf("%s\n", smallest); //The smallest word
   return 0;
}
```
```